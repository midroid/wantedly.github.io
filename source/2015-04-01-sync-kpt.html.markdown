---
title: チームでKPTをやってみました
date: 2015-04-01 19:02 JST
wantedly_id: 1208490
facebook_id: morizotter
twitter_id: morizotter
github_id: morizotter
---

![KPT-Meeting](images/kpt-meeting.jpg)

エンジニアの[森田](http://twitter.com/morizotter/)です。

チームでKPTをやってみました。その時に考えたことなどを書きたいと思います。

<script async class="speakerdeck-embed" data-id="eab824f9ec6840428bee0e56a50548cd" data-ratio="1.33159947984395" src="//speakerdeck.com/assets/embed.js"></script>

社内発表資料です。

## KPTとは

> アジャイル開発や反復型開発ではイテレーション（繰り返しの単位）ごとに作業の振り返りが推奨されるが、そのためのチーム反省会などでよく用いられるフォーマットである。

_[http://www.itmedia.co.jp/im/articles/0905/19/news143.html](http://www.itmedia.co.jp/im/articles/0905/19/news143.html)_

KはKeep、PはProblem、TはTryをそれぞれ表します。イテレーションの単位でチームで振り返りを行い、良い点（Keep）、問題点（Problem）、具体的な改善項目（Try）を軸にミーティングをします。基本的な流れは、Problemが具体的なTryになり、Tryが解消したら、消える。またはKeepに昇華します。KeepはProblemやTryに関係なく、上げていくこのが良いと思います。

## はじめた理由

社内で新規サービスを作ることになり、4名のチームが結成されました。サービス自体、アイディアのみがある状態から始まったので1週間ごとに見た目や機能が変更されていきます。既存のサービスのメンテナンスとはまた違う状況で、よりよいコミュニケーションとプロセスを作っていこうとやってみることにしました。

## どうやってやったか

### 期間、ツール、内容

イテレーションの単位は1週間。会議室に集まり、タスクの棚卸を行った後に実施しました。扱う内容は、現在開発中のプロダクトを中心にはするものの特に限定はしませんでした。プロダクトの改善や方向性などを話しましたが、扱う内容で一番多かったのは仕事の進め方に関するものでした。

KPTというとホワイトボードに付箋というのが一般的ですが、私たちのチームでは、 [Coggle](https://coggle.it/) というオンライン・マインドマップ・ツールを利用しました。

![Coggle](./images/coggle-whole.png)

ホワイトボードに書き出すことと比較すると利点は下記の通りです。

- 思いついたタイミングで書き足しておくことができる。
- 忘れそうな時に簡単に振り返れる。
- 毎回ミーティングの時に前回の内容を思い出すことができる。
- 書き出す負担が少ないので、継続しやすい。

決めたルールは「批判しない」ということのみです。目指すところは、チームでよいプロダクトを作ることです。できているひとができていない人を批判して、批判された人が心を入れ替えるということではありません。そして、リラックスした状態で、ただ、仕事をする上で「問題に思っていること」「改善したいこと」「うまくいっていること」を共有しました。

普通、ProblemがTryになり、それがKeepになるという流れがありますが、私たちのチームでは、Problemに対して、Tryにすることなく、そのままProblemでいつづけることがありました。TryになりやすいものはTryにして解決していくのですが、なかなかそうなりづらいものもあります。そういうものに関してはも書き出しておくことで、2,3週間すると改善案が出てきて自然と消えていったりしました。

### 1回目はどうしたのか

チームは僕以外KPTは初めてで、最初は、K、P、Tそれぞれどのような基準で出せば良いのかわかりませんでした。特に決まったルールもないので、各自、自身の判断で上げていきました。量もとても多くなったのですが、数を重ねていくうちにチーム内である程度共通の認識が生まれて、項目数も少なくなってきました。

## どんなことを話したのか

多岐に渡るのですが、目立つものとして、

- 他の人の作業が見えない：　Codetree -> Zenhub を導入して解消
- Githubの通知に気付けない： GithubNotifier/GithubPop を導入して解消
- 新しく開発するサービスの本質を理解する： T「WORK SHIFT」を一部を読む。
- 朝回に行う事
- 技術的なキャッチアップの方法。継続的な学習

などなどです。

## 何が良かったか

目の前の問題を解決するといったわかりやすいよさもありましたが、それと同じかそれ以上に良いと思ったのは、もう少し形のない問題について話すことができたことです。継続的学習や、サービスの本質、日々ちょっとだけ困っている細かいことなど。 **日々ちょっとだけ困っていること** というのは、とても重要で、それを共有することで答えを持っている人が見つかり、改善していくことができました（ちなみに僕はGithubの@メンションを見落としがちということなどを書きました）。

小さな問題を一つ一つ解消していくことで、最初は、殆ど変化がないように感じられますが、それを繰り返してゆくことで少しずつ業務の無駄がなくなり、知識も共有され、チーム感が出てきたように感じています。

## 継続的な改善は全てを変える

改善に関する格言を調べてみると、このようなものが見つかりました。

> Continuous improvements in any area eventually transform the operation.

ピータードラッガーの言葉なのですが、自分なりに訳すと「継続的な改善は全てを変える」ということになります。継続的に改善を続けていくことで、最初は小さな変化かもしれないのですがそれが少しずつ積もって、足腰が鍛えられ、物事がうまく回るようになります。それを繰り返していくことで、始めた頃とは全く異なるような成長を遂げられるのではないかなと思いました。

## 参考資料

- [KPTで粘り強く品質改善に取り組んだ話](http://techlife.cookpad.com/entry/2014/10/31/093305)
- [今日からできる！全員参加型の建設的フィードバック「ふりかえり」～実践編（KPT・タイムライン）](http://enterprisezine.jp/iti/detail/788)
- [KPTの基本と、その活用法](http://www.slideshare.net/esmsec/kpt-27942223)
