<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wantedly Engineer Blog</title>
  <subtitle>Wantedly開発チームブログ</subtitle>
  <id>http://engineer.wantedly.com/</id>
  <link href="http://engineer.wantedly.com/"/>
  <link href="http://engineer.wantedly.com/feed.xml" rel="self"/>
  <updated>2015-10-13T07:30:00Z</updated>
  <author>
    <name>@wantedly</name>
  </author>
  <entry>
    <title>Sketch速習集会</title>
    <link rel="alternate" href="http://engineer.wantedly.com/2015/10/13/learn-sketch.html"/>
    <id>http://engineer.wantedly.com/2015/10/13/learn-sketch.html</id>
    <published>2015-10-13T07:30:00Z</published>
    <updated>2015-10-13T18:34:02+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;デザイナーの宇佐美 &lt;a href="https://twitter.com/ui_pb"&gt;@Ui_Pb&lt;/a&gt; です。&lt;/p&gt;

&lt;h2&gt;速習集会とは&lt;/h2&gt;

&lt;p&gt;2015年10月1日に、 Wantedly のオフィスにてSketch速習会を開催しました！
実は、過去にも何度か社外の方を数名招待する形で速習会を行っております。
なぜ数名のみ紹介する形をとっているかというと、以前から定期的に行っていた社内勉強会に社外の人も数名招待しよう！という流れから速習会を定期開催するようになったからです。そのため、社外の方々だけでなく社内のエンジニアやデザイナーも毎回参加しています。&lt;/p&gt;

&lt;h3&gt;過去に行った速習会&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wantedly.connpass.com/event/17532/"&gt;JSONScheme速習会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wantedly.connpass.com/event/18018/"&gt;きれいなCSS速習会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wantedly.connpass.com/event/20077/"&gt;UML速習会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wantedly.connpass.com/event/19585/"&gt;データ解析ツール速習会 TreasuData/DOMO編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wantedly.connpass.com/event/19067/"&gt;Docker速習会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;今回やったこと&lt;/h3&gt;

&lt;p&gt;今回の速習会では、Sketchファイルの基本的な編集方法とSketchファイルを貰った時に意識して見て欲しいポイントを伝えることを目的に行いました。
Wantedlyではエンジニア、デザイナーともにSketchという共通のツールを使うことで、デザイナーとエンジニア間のコミュニケーションコストを下げよう！という取り組みを行っていることからこのテーマを選んだためです。&lt;/p&gt;

&lt;p&gt;速習会中は、デザイナーでない方々にも多くご参加いただいたので、Sketchを「どう使っているか」を実際に見ていただき、
参加していた方々ご自身に実践していただくことで使い方を知ってもらうよう意識してSketchについての発表と実践する機会を設けさせていただきました！&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2015-10-13/1-14da23ee.png" /&gt;&lt;/p&gt;

&lt;h2&gt;簡単に自己紹介すると&lt;/h2&gt;

&lt;p&gt;今年の3月まで高校に通っていて、6月からWantedlyにインターンとしてジョイン。9月からデザイナーとして社員になりました。WantedlyではWeb、iOSのUIデザインをメインにやっていて、フロントエンドも書きます。最近はRailsも書くようになりました。個人ではグラフィックアニメーションや写真、DTPなど幅広くやっています。&lt;/p&gt;

&lt;h2&gt;こんなこと話しました&lt;/h2&gt;

&lt;p&gt;デザインツールを使ったことのないエンジニアが多かったので、アートボードの作り方から解説をしました。基本的には導入を丁寧にやってある程度からはトライアンドエラーの繰り返しがツールをの使い道を身につけるにはいいと思っています。なので、スライドでは基礎の操作方法の解説が終わったら難しめの課題を出して、試行錯誤をしてSketchを使ってもらう形になっています。使い方の特徴としては実装するところに重点を置いて、Sketchファイルを作っていくところです。時間的な問題で載せられなかったことがたくさんあるので、またいつかここに書きたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/a2iQt2At1xbaiQ" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/core619/sketchwantedly" title="Sketch速習会@Wantedly" target="_blank"&gt;Sketch速習会@Wantedly&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/core619" target="_blank"&gt;Ryo Usami&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;プラグイン&lt;/h2&gt;

&lt;p&gt;Sketchを使って高速にデザインを作るにはプラグインが不可欠です。僕が普段使っているプラグインの一部を紹介します。詳しい操作方法は各プラグインのページを参照してください。&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://github.com/soutaro/align-text-baseline-sketch-plugin"&gt;Align Text Baseline&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sketchでは日本語のフォントボディーの解釈にバグがあり、&lt;code&gt;line-height&lt;/code&gt;が使い物になりません。またその影響で、&lt;code&gt;Text&lt;/code&gt;のheightが正確な値になっていないため、要素内で垂直中央揃えが効きません。このプラグインはその問題を解決するために作られたもので、ボタンなどを作る時に重宝します。&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://github.com/timuric/Content-generator-sketch-plugin"&gt;Content-generator-sketch-plugin-master&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Sketchで作った要素に人名、画像などをまとめて流し込めるプラグインです。Wantedlyでは各募集でイメージ画像を大きく掲載しているので、そこのイメージを再現するのに事前に何枚か募集の画像をダウンロードしておいて自動で流し込めるようにしています。&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://github.com/andrewfiorillo/sketch-palettes"&gt;Sketch Palettes&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;SketchにはカラーパレットがSketchアプリ全体に紐づけられている&lt;code&gt;Global Colors&lt;/code&gt;とファイルごとに設定する&lt;code&gt;Documents Colors&lt;/code&gt;があります。Sketch自体のテンプレート機能を使って&lt;code&gt;Documents Colors&lt;/code&gt;で頑張ることもできますが、何かと不便な時もあるので、プロジェクトごとにカラーパレットを書き出しておいて、使うときにimportすることにしています。&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://github.com/utom/sketch-measure"&gt;Sketch Measure&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;width, height, mergin, padding, font-size,colorなど実装の際に確認するパラペーターを可視化することができます。相手がsketchを持ってない場合や実装する人に細かく指示したい場合などに使います。&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://github.com/usa619/wantedly-color-picker"&gt;Wantedly Color Picker&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;WantedlyではSassでCSSを書いていて、カラーパレットの変数名で色指定を行っています。実装するときにカラーコードから変数名を調べるのがめんどくさかったので、自動で変数名を取得するプラグインを作りました！&lt;/p&gt;

&lt;h2&gt;その他&lt;/h2&gt;

&lt;h3&gt;懇親会&lt;/h3&gt;

&lt;p&gt;今回は、焼きそばや唐揚げ、ピザなどの軽食を準備させて頂きました！
社外の方々と話す貴重な機会となり、速習会に参加した社内エンジニアも楽しめました。
ご参加いただいた皆様に感謝です！&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2015-10-13/4-168e14c4.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;最後に&lt;/h3&gt;

&lt;p&gt;Wantedlyでは引き続き、2週間に1度のペースで速習会を行っています。Connpassにて開催の1週間前から募集を開始しております。
今後も、様々なテーマの速習会を開催していく予定ですので、ご興味のある方は是非ご応募ください！
&lt;br&gt;ref &lt;a href="http://wantedly.connpass.com/"&gt;ConnpassのWantedlyグループ&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>メッセージングアプリSync開発の舞台裏(iOS)</title>
    <link rel="alternate" href="http://engineer.wantedly.com/2015/09/09/sync-messenger-ios-project.html"/>
    <id>http://engineer.wantedly.com/2015/09/09/sync-messenger-ios-project.html</id>
    <published>2015-09-09T03:00:00Z</published>
    <updated>2015-09-09T14:26:09+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;ビジネスシーンで使えるメッセージングサービス&lt;a href="https://www.wantedly.com/sync"&gt;Sync&lt;/a&gt;をローンチしました。
その開発の舞台裏をiOSを中心に紹介します。開発のスケジュール、リソース、アプリの規模や進め方など参考になれば幸いです。&lt;/p&gt;

&lt;h2&gt;サービスについて&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.wantedly.com/sync"&gt;Sync&lt;/a&gt;は社内・社外を問わずプロジェクトやビジネスコミュニケーションがより良い体験なることをゴールに開発しました。以下のURLよりご利用頂けます。
&lt;a href="https://m.wantedly.com/"&gt;Web版&lt;/a&gt; , &lt;a href="https://wtd-sync-update-channel.herokuapp.com/download/latest?platform=darwin&amp;amp;amp;channel=production"&gt;Desktop版(OnlyOSX)&lt;/a&gt; , &lt;a href="https://itunes.apple.com/jp/app/sync-group-messaging-app-for/id1014462508"&gt;iPhone&lt;/a&gt; , &lt;a href="https://play.google.com/store/apps/details?id=com.wantedly.android.sync"&gt;Andorid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img title="Sync___成果を生み出すグループメッセージアプリ.jpg" alt="Sync___成果を生み出すグループメッセージアプリ.jpg" src="https://qiita-image-store.s3.amazonaws.com/0/4943/dff18989-a4d7-c754-43d3-4690566ac111.jpeg" /&gt;&lt;/p&gt;

&lt;h2&gt;アーキテクチャ&lt;/h2&gt;

&lt;p&gt;&lt;img title="201500825_Sync_iOSの開発舞台裏_key.jpg" alt="201500825_Sync_iOSの開発舞台裏_key.jpg" src="https://qiita-image-store.s3.amazonaws.com/0/4943/c835ae0e-092e-4875-0288-ecf80e54857a.jpeg" /&gt;&lt;/p&gt;

&lt;h3&gt;サーバ&lt;/h3&gt;

&lt;p&gt;既存の&lt;a href="https://www.wantedly.com"&gt;Wantedly&lt;/a&gt;サーバに並列して、&lt;a href="https://m.wantedly.com"&gt;Sync&lt;/a&gt;のサービスをマイクロサービスアーキテクチャ風に構築しています。要素技術や構成はサービスの初期フェイズにおけるスピディーな開発とスモールな運用に適しているものを選定しています。&lt;/p&gt;

&lt;p&gt;AccountServerが認証やユーザ情報管理を、APIServerが主要なデータのやり取りをREST形式で提供してます。共にRailsで構築しており&lt;a href="http://cookpad.com/"&gt;Cookpad&lt;/a&gt;がOSSで提供している、RESTfulWebAPIを素早くパワフルに開発するためのライブラリ&lt;a href="https://github.com/cookpad/garage"&gt;Garage&lt;/a&gt;を採用しています。サーバはAPIのみ提供しておりHTMLをレンダリングするサーバはありません。&lt;/p&gt;

&lt;p&gt;メッセージの送受信に必要なリアルタイム通信部分は&lt;a href="https://www.firebase.com/"&gt;Firebase&lt;/a&gt;というGoogle傘下のPaaSを利用しています。リアルタイム通信をどのような要素技術を活用するか&lt;a href="https://ja.wikipedia.org/wiki/WebSocket"&gt;WebSocket&lt;/a&gt;や&lt;a href="https://en.wikipedia.org/wiki/Server-sent_events"&gt;Server Sent Events(SSE)&lt;/a&gt;、&lt;a href="https://en.wikipedia.org/wiki/Comet_(programming"&gt;LongPolling&lt;/a&gt;)などを検討した結果、&lt;a href="https://www.firebase.com/"&gt;Firebase&lt;/a&gt;を選択しました。プッシュ系・プル系のリアルタイム配信では最新の更新情報を受領しても差分更新なのでクライアント側のデータ管理が大変になりがちです。&lt;a href="https://www.firebase.com/"&gt;Firebase&lt;/a&gt;は内部では&lt;a href="https://ja.wikipedia.org/wiki/WebSocket"&gt;WebSocket&lt;/a&gt;で通信していますが、そこがうまく隠蔽されサーバとクライアントのデータをリアルタイムで同期してくれるので管理の煩わすさから開放されます。また&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;/&lt;a href="http://socket.io/"&gt;Socket.IO&lt;/a&gt;などで構築したサーバ群はスケールや運用を行うのはとても骨が折れますがPaaSなので運用面の負担も軽減できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Account Server / &lt;a href="https://github.com/rails/rails"&gt;Rails&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/cookpad/garage"&gt;Garage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;API Server / &lt;a href="https://github.com/rails/rails"&gt;Rails&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/cookpad/garage"&gt;Garage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Image Server / &lt;a href="https://github.com/sinatra/sinatra/"&gt;Sinatra&lt;/a&gt; &amp;amp; &lt;a href="http://www.imagemagick.org/script/index.php"&gt;ImageMagick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Realtime Server / &lt;a href="https://www.firebase.com/"&gt;Firebase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;クライアント&lt;/h3&gt;

&lt;p&gt;クライアントはマルチプラットフォームに対応してサービスを提供しています。Web&amp;amp;Desktopはシングルページアプリケーション（ &lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt; &amp;amp; &lt;a href="http://electron.atom.io/"&gt;Electron&lt;/a&gt; )で構築しています。Desktop版はWindows版が開発中でOSXのみ利用頂けます。iOSはSwiftの関数的な機能を活用して開発しています。 AndroidはJavaで開発しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web&amp;amp;Desktop / &lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt; v1.4, &lt;a href="http://electron.atom.io/"&gt;Electron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iOS / Xcode6.4, Swift v1.2 iOS8〜&lt;/li&gt;
&lt;li&gt;Android / Android Studio v1.3.2, Android v4.0.3〜5.1.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;チーム&lt;/h2&gt;

&lt;p&gt;チーム編成は最大時で以下のような体制で常時フルコミットで参画してるのはそのうちの５名ほどです。iOSの体制が厚いので新規機能を率先して開発していました。&lt;/p&gt;

&lt;p&gt;&lt;img title="201500825_Sync_iOSの開発舞台裏_key.jpg" alt="201500825_Sync_iOSの開発舞台裏_key.jpg" src="https://qiita-image-store.s3.amazonaws.com/0/4943/09962764-0e16-672e-ff15-08927d239d65.jpeg" /&gt;&lt;/p&gt;

&lt;p&gt;Product Owner &amp;amp; API Server
CTO @kawasy&lt;/p&gt;

&lt;p&gt;Web &amp;amp; Desktop
Engineer @imaimiami / @creasty&lt;/p&gt;

&lt;p&gt;iOS
Engineer @susieyy / @morizotter / &lt;a href="https://github.com/smztko"&gt;@smztko&lt;/a&gt; / Desiner @ferasyasin@github&lt;/p&gt;

&lt;p&gt;Android
Engineer @cattaka / Desiner &lt;a href="https://github.com/yanAoym"&gt;@yanAoym&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;fastlane
Engineer @hedjirog&lt;/p&gt;

&lt;h2&gt;スケジュール（iOS）&lt;/h2&gt;

&lt;p&gt;&lt;img title="201500825_Sync_iOSの開発舞台裏_key.jpg" alt="201500825_Sync_iOSの開発舞台裏_key.jpg" src="https://qiita-image-store.s3.amazonaws.com/0/4943/84c7910f-0efe-cb67-7246-888cb28e0c2b.jpeg" /&gt;&lt;/p&gt;

&lt;p&gt;サービスの開発は５月からスタートしiOSは３ヶ月間で申請まで行いました。iOSの開発リソースは６人月ぐらいです。最初の１ヶ月はプロトタイプ開発期間としてコードレビューもなく１人ででゴリゴリとコードを書きつつ、基本的な通信部分やMVVMアーキテクチャの実装、共通ロジックの用意などを行いました。本開発の始まった６月からは２名のエンジニアが追加となりプルリクエストのコードはレビューを行う体制で進めました。&lt;/p&gt;

&lt;h2&gt;進め方&lt;/h2&gt;

&lt;p&gt;上記のスケジュール図のようなざっくりな工程表と、要件一覧をもとにプロジェクトがスタートしました。２週間を１イテレーションとしてマイルストーンにタスクを入れてゆるいアジャイル風な運営で進めています。タスクをイテレーションの最初にある程度担当者にアサインはしつつも、進み具合でアサインを変更したり、マイルストーン間のタスクのを入れ替えたりと臨機応変さとスピード感を重視しています。実装を進めていく中で当初計画の要件に対してフィードバックを元に大きく機能を追加したり、実装済みでも大きく機能を削ったりと、より良い体験を作り上げることをゴールにドラスティックな変更を行いつつ開発しました。&lt;/p&gt;

&lt;p&gt;ミーティングを必要最低限に抑えることでコーディングの時間をより多く確保しました。実装が始まる前の要件定義の段階で集中的にミーティングを重ねプロトタイプやデモを作って認識を合わせつつサービスの具体的なイメージをしっかり共有しました。実装の具体的な個々の仕様については、GitHubイシュー上で非同期で行い議論の証跡と結論や次のアクションを明文化しました。&lt;/p&gt;

&lt;h2&gt;ドッグフーディングとユーザフィードバック&lt;/h2&gt;

&lt;p&gt;&lt;img title="dogfooding.jpg" alt="dogfooding.jpg" src="https://qiita-image-store.s3.amazonaws.com/0/4943/74aa07b7-9593-97f1-c144-d9afe60ee533.jpeg" /&gt;&lt;/p&gt;

&lt;p&gt;ドッグフーディング（Dogfooding）とは、自社サービスを開発者自らが日常的に利用して問題点を早期に発見したりユーザー視点で品質やＵＸを確認することです。&lt;/p&gt;

&lt;p&gt;開発開始から２週間でチームで利用していた&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;から乗り換えることを目標にしました。自分たちから積極的に利用することで開発者である自分たちからまずファンになることを大事にしました。１ヶ月ごろから社内の他のチームも&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;から乗り換えてもらい、たくさんのフィードバックを受けて安定性の向上と改善に勤めました。社内で実績を築いたことで２ヶ月ごろから身近な社外の方々にも声をかけて使ってもらい、さらに多くのフィードバックを頂きました。&lt;/p&gt;

&lt;h2&gt;メトリクス（iOS）&lt;/h2&gt;

&lt;p&gt;2015/09/05 時点です。開始からだいたい４ヶ月（８０営業日ぐらい）ほど経過しています。&lt;/p&gt;

&lt;h4&gt;Github上の主要なメトリクス&lt;/h4&gt;

&lt;p&gt;プルリクエストはできるだけ小さい単位で送り合ってコンフリクト軽減とコードレビューしやすいように工夫をしています。プルリクエストがほとんどないプロトタイプ期間を省くと１日平均１８件ぐらいになります。仕様やタスク、バグレポートなど明文化するものはすべてGitHubのイシューにして情報をすべてリポジトリ内で一元的に管理しています。すべてのプロジェクト情報がGitHub内ある、GitHub探せば見つかる状態を作っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4,700 Commits&lt;/li&gt;
&lt;li&gt;1,050 Pull Requests Closed&lt;/li&gt;
&lt;li&gt;864 Isusses Closed 83 Open ( Total 947 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;イシューの内訳です。Bugのイシューが一番多いです。Feedbackはローンチ前にTestFlightとFabricBetaで社内外に配布して使ってもらったフィードバックの数です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improve 289 (30%)&lt;/li&gt;
&lt;li&gt;Bug 492 (51%)&lt;/li&gt;
&lt;li&gt;Feedback 64 (7%)&lt;/li&gt;
&lt;li&gt;Other(メモ、仕様、アイデアetc) 102 (12%)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;コードステップ数（iOS）&lt;/h4&gt;

&lt;p&gt;Swiftのコードが１４１ファイル、１万９千行ほどですがフルコンパイルにPodsライブラリも合わせて４分!!ほどかかります。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cloc
     288 text files.
     285 unique files.
      74 files ignored.

http://cloc.sourceforge.net v 1.64  &lt;span class="nv"&gt;T&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.36 s &lt;span class="o"&gt;(&lt;/span&gt;157.4 files/s, 18819.8 lines/s&lt;span class="o"&gt;)&lt;/span&gt;
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Swift                          141           3157           1698          18708
JSON                            66              0              0           1488
Objective C                      3             90            116            212
C/C++ Header                     4             28             27             63
-------------------------------------------------------------------------------
SUM:                           214           3275           1841          20471
-------------------------------------------------------------------------------
&lt;/pre&gt;
&lt;h4&gt;画面数&lt;/h4&gt;

&lt;p&gt;ViewControllerは平均３００行（空行なし）なので、ViewControllerだけで１万２千行になり全体の６４％になります。ストリーボードのファイルはコンフリクトしやすく１つのファイルにたくさんの画面を作成すると非常に遅くなるので細かく分割しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;約２５画面&lt;/li&gt;
&lt;li&gt;４２ ViewControllers&lt;/li&gt;
&lt;li&gt;２３ Storyboards&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;ライブラリ数&lt;/h4&gt;

&lt;p&gt;Swiftの機能を活かしたライブラリを積極的に取り入れています。Swiftライブラリを&lt;a href="https://cocoapods.org/"&gt;CocoaPods&lt;/a&gt;でインストールすると、コンパイル時間が長くなるので事前にフレームワークを作成できる&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt;も利用しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; 7 Swiftライブラリ&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cocoapods.org/"&gt;CocoaPods&lt;/a&gt; 3 Swiftライブラリ / 33 ObjCライブラリ&lt;/li&gt;
&lt;li&gt;Total 43 ライブラリ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Swiftコンパイル時間&lt;/h2&gt;

&lt;p&gt;&lt;img title="201500825_Sync_iOSの開発舞台裏_key.jpg" alt="201500825_Sync_iOSの開発舞台裏_key.jpg" src="https://qiita-image-store.s3.amazonaws.com/0/4943/ea8b7162-d30e-fb17-25c8-25e920afe31a.jpeg" /&gt;&lt;/p&gt;

&lt;p&gt;MacBookPro (15-inch, Late 2013)でフルコンパイル時間が４分以上もかかっていたので以下の施策を行いました。&lt;/p&gt;

&lt;h4&gt;MacBookProを２台体制で開発する&lt;/h4&gt;

&lt;p&gt;レビューなどでブランチを切り替えると、Podsのインストールや、フルコンパイルが必要だったりするので２台体制で行いました。コンパイル時間も長かったので、待ち時間の有効活用に繋がり効率的に開発を進めることができました。&lt;/p&gt;

&lt;h4&gt;コンパイル時間を短縮する&lt;/h4&gt;

&lt;p&gt;４分以上コンパイルに必要になったころから、コンパイル時間の短縮化を行いました。４分１０秒からー８０秒の２分５０秒になりました。 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;型推論しないで型を明記する （ArrayやDictionaryも）&lt;/li&gt;
&lt;li&gt;複数のswiftファイルを一つにまとめる&lt;/li&gt;
&lt;li&gt;継承しないclassはfinalを明記する&lt;/li&gt;
&lt;li&gt;Cartage対応のライブラリはPodsでインストールしない&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;fastlane（iOS）&lt;/h2&gt;

&lt;p&gt;&lt;img title="201500825_Sync_iOSの開発舞台裏_key.jpg" alt="201500825_Sync_iOSの開発舞台裏_key.jpg" src="https://qiita-image-store.s3.amazonaws.com/0/4943/ffcbacf4-6bc7-72ae-decb-827ace76f764.jpeg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fastlane.tools/"&gt;fastlane&lt;/a&gt;を活用してビルド、テスト、配布までの工程を自動化しました。プルリクエストがレビューされマスターにマージされる度に自動で配布されます。常に最新のマスターの状態のリリースビルドを手元で常に確認できるようになりました。また配布が容易になることで、社内へのドックフーディング、社外へのユーザフィードバックなどローンチ前にたくさんの方に使ってもらいやすくなりました。&lt;/p&gt;

&lt;p&gt;マージマスターの配布はエンジニアとテスターに留め、ある程度安定していることを確認してから２，３日に一度社内外へ配布していました。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;このような背景で作られたサービスがどんなのか気になってくれ方是非使ってみてください！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.wantedly.com/sync"&gt;Syncについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://m.wantedly.com/"&gt;Web版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wtd-sync-update-channel.herokuapp.com/download/latest?platform=darwin&amp;amp;amp;channel=production"&gt;Desktop版(OnlyOSX)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows版は開発中です&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itunes.apple.com/jp/app/sync-group-messaging-app-for/id1014462508"&gt;iPhone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.wantedly.android.sync"&gt;Andorid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Hashicorp Product Meetup というイベントを開きました</title>
    <link rel="alternate" href="http://engineer.wantedly.com/2015/08/06/hashicorp-product-meetup.html"/>
    <id>http://engineer.wantedly.com/2015/08/06/hashicorp-product-meetup.html</id>
    <published>2015-08-06T01:17:00Z</published>
    <updated>2015-09-09T14:26:09+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;エンジニアの内田 &lt;a href="https://twitter.com/spesnova"&gt;@spesnova&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;2015年8月5日に、&lt;a href="https://twitter.com/deeeet"&gt;@deeeet&lt;/a&gt; さんと一緒に Wantedly のオフィスにて Hashicorp Product Meetup と称して、
Hashicorp プロダクトに関する知見、悩み、展望 etc をフランクに共有する会を開きました。&lt;/p&gt;

&lt;p&gt;参加者全員がゆるくざっくばらんに話せる場を作りたいと思って招待制のイベントにしました。
参加者の方は &lt;a href="https://twitter.com/deeeet"&gt;@deeeet&lt;/a&gt; さんと自分の知り合いの方から、Hashicorpプロダクトを既に利用していたり、導入予定の方々にお声をかけせて頂き、その方々がまた数名招待するという形にしました。
「行きたかった&amp;hellip;」というツイートもチラホラありました、、参加できなかった方ごめんなさい。。&lt;/p&gt;

&lt;p&gt;どんな内容だったのかをtogetterと以下に簡単にまとめておきます: &lt;a href="http://togetter.com/li/856947"&gt;http://togetter.com/li/856947&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2015-08-06/intro-db53a3bf.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2015-08-06/audience-1d0dffb6.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/2015-08-06/lt_schedule-d85af476.jpg" /&gt;&lt;/p&gt;

&lt;h2&gt;Working With Terraform by &lt;a href="https://twitter.com/glidenote"&gt;@glidenote&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;LT のトップバッターは &lt;a href="https://twitter.com/glidenote"&gt;@glidenote&lt;/a&gt; さん。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="478b6c4c7d75463388488e8ee465672d" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;Kaizen おなじみの hubot からプルリクを作ってマージしたら CircleCI でデプロイというフローを、 AMI を作るケースでデモされていました。
Packer の実行も、 Packer のバージョンだったり、AWS API を扱えるキー渡したりと案外ちょっと環境依存するので、誰がやっても同じ結果を得るために CI でやるのいいなぁと思いました。Terraform 使おうと思ってる方はスライドに載ってる Terraform 知見は必見です。あと Hashicorp とは関係ないですが、 Kaizen の行動哲学好きです。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="http://blog.glidenote.com/blog/2015/02/18/terraform-github-circleci-atlas-aws/"&gt;Terraform + GitHub + CircleCI + Atlasを利用してAWSの操作を自動化した - Glide Note - グライドノート&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Quipper と Hashicorp by &lt;a href="https://twitter.com/hakobera"&gt;@hakobera&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/hakobera/a5ced7653957a6491047"&gt;&lt;img src="/images/2015-08-06/hakobera_slide-70dac2f3.png" /&gt;&lt;/a&gt;
&lt;a href="https://gist.github.com/hakobera/a5ced7653957a6491047"&gt;スライド&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quipper でも &lt;a href="https://twitter.com/glidenote"&gt;@glidenote&lt;/a&gt; さんのブログで紹介されている CircleCI を使った Terraform 利用を紹介されていた。特徴的なのは Codenize Tool との併用をしていて適材適所で使い分けているところ。また &lt;code&gt;.tf&lt;/code&gt; ファイルをどのように分けてます？という投げかけがあって、座談会の方では、AWS リソースごとにわける、つまり &lt;code&gt;ec2.tf&lt;/code&gt; とか &lt;code&gt;rds.tf&lt;/code&gt; のようにするよりも、プロジェクトごとに分ける方が依存関係とか見やすいよねという話になった。&lt;/p&gt;

&lt;h2&gt;運用自動化に関する話 by &lt;a href="https://twitter.com/zembutsu"&gt;@zembutsu&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;こちらは非公開になります&lt;/p&gt;

&lt;h2&gt;Terraform at Wantedly by &lt;a href="https://twitter.com/dtan4"&gt;@dtan4&lt;/a&gt;&lt;/h2&gt;

&lt;script async class="speakerdeck-embed" data-id="1246047604f0473dbbdd8f47b0912706" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;Wantedly での Terraform 利用例の話。Terraform は Codenize Tools のように既存のリソースの export 機能がないので、新規に追加するリソースにしか導入しづらいのだけど、&lt;a href="https://twitter.com/dtan4"&gt;@dtan4&lt;/a&gt; 作の terraforming という便利ツールを使って、既存リソースへ導入していったという話。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="https://github.com/dtan4/terraforming"&gt;dtan4/terraforming&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;consul-atlas-alerts by &lt;a href="https://twitter.com/rrreeeyyy"&gt;@rrreeeyyy&lt;/a&gt;&lt;/h2&gt;

&lt;script async class="speakerdeck-embed" data-id="cc1fbf3754674edd9b2079ec29ba0dca" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;Atlas 及び Atlas の Consul 連携について。まず Atlas を実際に使ってる人は自分の観測範囲であまりいないのでとても貴重な話が聞けた。Atlas は CircleCI と被っている部分もあって即採用すべきものでもない。ただ、Consul クラスタを作る際に Atlas に join させるだけで良かったり、 consul-alert 相当のものが Atlas + Consul に搭載されていたりと Atlas 固有のおいしいポイントもあるとのこと。あと &lt;a href="https://twitter.com/rrreeeyyy"&gt;@rrreeeyyy&lt;/a&gt; は「れい」と読むことを知った。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="http://www.slideshare.net/rrreeeyyy117/consul-andalertsmonitoring"&gt;consul &amp;amp; consul-alerts を使った監視システム (hbstyle-2015-01-08)&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Go packages from Hashicorp by &lt;a href="https://twitter.com/deeeet"&gt;@deeeet&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src="/images/2015-08-06/deeeet_slide-f322a10c.png" /&gt;
&lt;a href="http://go-talks.appspot.com/github.com/tcnksm/talks/2015/08/hashicorp-meetup.slide#1"&gt;スライド&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/deeeet"&gt;@deeeet&lt;/a&gt; さんの話は Hashicorp プロダクトの利用例というよりその内側の話。Hashicorp がプロダクトを作る中で生まれてきた副産物というかライブラリについて紹介されていた。
Golang 使う人には有用な内容だったし、合わせて Hashicorp が利用者のことやバグ報告ちゃんとしてもらうためにわかりやすいエラーを出すといった Hashicorp tao にも言及していて勉強になった。&lt;/p&gt;

&lt;h2&gt;Terraform Tips by &lt;a href="https://twitter.com/tkak"&gt;@tkak&lt;/a&gt;&lt;/h2&gt;

&lt;script async class="speakerdeck-embed" data-id="91c928c7b1df430191f8e5955b41b6d7" data-ratio="1.37081659973226" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="https://twitter.com/tkak"&gt;@tkak&lt;/a&gt; さんの発表。社内独自環境向けに Custom Provider を作る方法だったり、Module について紹介されていた。Chef や Puppet でインフラをコード化したから誰でもインフラのコード触れるよね、と思ったら結局 Chef 職人しか触れないみたいなことと同じく、 Terraform 使って誰でも AWS リソース追加できるねと思ったら今度は RDS のパラメータ良くわかりませんみたいなことは現実に起きてくる。なので、 Module を使ってリソースを抽象化して必要なパラメータを絞ってあげると良いことをこの発表で学べた。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="http://tkak.hatenablog.com/entry/2014/11/07/074044"&gt;TerraformのProviderを作った - tkak&amp;#39;s tech blog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Usecase examples of Pakcer by &lt;a href="https://twitter.com/hsbt"&gt;@hsbt&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/fTgmJGwbnqWelu" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/hsbt/20150805-hashicorptalks" title="Usecase examples of Packer " target="_blank"&gt;Usecase examples of Packer &lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/hsbt" target="_blank"&gt;Hiroshi SHIBATA&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/hsbt"&gt;@hsbt&lt;/a&gt; さんによる GMO ペパボでも Packer での AMI イメージ作成事例の話。Packer の中で cloud-init 使ったり、serverspec 流したり、何をイメージ化するか等々 Packer の知見が詰まった発表でした。さらに詳細な話は YAPC でされるとのこと。&lt;/p&gt;

&lt;h2&gt;Stretcher in 5min by &lt;a href="https://twitter.com/fujiwara"&gt;@fujiwara&lt;/a&gt;&lt;/h2&gt;

&lt;script async class="speakerdeck-embed" data-id="8d83ac3687ae40c9a68cf7406c1b50e6" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="https://twitter.com/fujiwara"&gt;@fujiwara&lt;/a&gt; さんによる自作のデプロイツール stretcher の話。&lt;a href="https://twitter.com/sora_h"&gt;@sora_h&lt;/a&gt; さんの &lt;a href="https://github.com/sorah/mamiya"&gt;mamiya&lt;/a&gt; にインスパイアされたとのことで、 S3 に置いたアプリコードを rsync で取得してくる指示を SSH ではなくて consul event でトリガーすることで、スケーラブルかつ速い。10 秒でデプロイが完了するらしい、速い&amp;hellip;。こちらも自作の &lt;a href="https://github.com/fujiwara/consul-kv-dashboard"&gt;Consul を使ったダッシュボード&lt;/a&gt;と組み合わせたデプロイデモも見せてもらった。&lt;/p&gt;

&lt;p&gt;ref: &lt;a href="https://github.com/fujiwara/stretcher"&gt;fujiwara/stretcher&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;座談会&lt;/h2&gt;

&lt;p&gt;LT のあとは 1 時間くらい皆で自由に話してました。この時間が勉強会の中で一番濃い時間かなと思います。（メモがなくてごめんなさい）&lt;/p&gt;

&lt;h2&gt;最後に&lt;/h2&gt;

&lt;p&gt;参加してくださった皆さん、イベント開くにあたって協力してくれた同僚の皆さんありがとうございました！&lt;/p&gt;

&lt;p&gt;Wantedly では今後もインフラに限らずエンジニア向け勉強会を行っていく予定です。
本日来れなかった方もぜひ次回オフィスにいらしてください :)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>チームでKPTをやってみました</title>
    <link rel="alternate" href="http://engineer.wantedly.com/2015/04/01/sync-kpt.html"/>
    <id>http://engineer.wantedly.com/2015/04/01/sync-kpt.html</id>
    <published>2015-04-01T10:02:00Z</published>
    <updated>2015-09-09T14:26:09+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="KPT-Meeting" src="/images/kpt-meeting-7cfe5e43.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;エンジニアの&lt;a href="http://twitter.com/morizotter/"&gt;森田&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;チームでKPTをやってみました。その時に考えたことなどを書きたいと思います。&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="eab824f9ec6840428bee0e56a50548cd" data-ratio="1.33159947984395" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;社内発表資料です。&lt;/p&gt;

&lt;h2&gt;KPTとは&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;アジャイル開発や反復型開発ではイテレーション（繰り返しの単位）ごとに作業の振り返りが推奨されるが、そのためのチーム反省会などでよく用いられるフォーマットである。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="http://www.itmedia.co.jp/im/articles/0905/19/news143.html"&gt;http://www.itmedia.co.jp/im/articles/0905/19/news143.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;KはKeep、PはProblem、TはTryをそれぞれ表します。イテレーションの単位でチームで振り返りを行い、良い点（Keep）、問題点（Problem）、具体的な改善項目（Try）を軸にミーティングをします。基本的な流れは、Problemが具体的なTryになり、Tryが解消したら、消える。またはKeepに昇華します。KeepはProblemやTryに関係なく、上げていくこのが良いと思います。&lt;/p&gt;

&lt;h2&gt;はじめた理由&lt;/h2&gt;

&lt;p&gt;社内で新規サービスを作ることになり、4名のチームが結成されました。サービス自体、アイディアのみがある状態から始まったので1週間ごとに見た目や機能が変更されていきます。既存のサービスのメンテナンスとはまた違う状況で、よりよいコミュニケーションとプロセスを作っていこうとやってみることにしました。&lt;/p&gt;

&lt;h2&gt;どうやってやったか&lt;/h2&gt;

&lt;h3&gt;期間、ツール、内容&lt;/h3&gt;

&lt;p&gt;イテレーションの単位は1週間。会議室に集まり、タスクの棚卸を行った後に実施しました。扱う内容は、現在開発中のプロダクトを中心にはするものの特に限定はしませんでした。プロダクトの改善や方向性などを話しましたが、扱う内容で一番多かったのは仕事の進め方に関するものでした。&lt;/p&gt;

&lt;p&gt;KPTというとホワイトボードに付箋というのが一般的ですが、私たちのチームでは、 &lt;a href="https://coggle.it/"&gt;Coggle&lt;/a&gt; というオンライン・マインドマップ・ツールを利用しました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Coggle" src="/images/coggle-whole-83215cc5.png" /&gt;&lt;/p&gt;

&lt;p&gt;ホワイトボードに書き出すことと比較すると利点は下記の通りです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;思いついたタイミングで書き足しておくことができる。&lt;/li&gt;
&lt;li&gt;忘れそうな時に簡単に振り返れる。&lt;/li&gt;
&lt;li&gt;毎回ミーティングの時に前回の内容を思い出すことができる。&lt;/li&gt;
&lt;li&gt;書き出す負担が少ないので、継続しやすい。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;決めたルールは「批判しない」ということのみです。目指すところは、チームでよいプロダクトを作ることです。できているひとができていない人を批判して、批判された人が心を入れ替えるということではありません。そして、リラックスした状態で、ただ、仕事をする上で「問題に思っていること」「改善したいこと」「うまくいっていること」を共有しました。&lt;/p&gt;

&lt;p&gt;普通、ProblemがTryになり、それがKeepになるという流れがありますが、私たちのチームでは、Problemに対して、Tryにすることなく、そのままProblemでいつづけることがありました。TryになりやすいものはTryにして解決していくのですが、なかなかそうなりづらいものもあります。そういうものに関してはも書き出しておくことで、2,3週間すると改善案が出てきて自然と消えていったりしました。&lt;/p&gt;

&lt;h3&gt;1回目はどうしたのか&lt;/h3&gt;

&lt;p&gt;チームは僕以外KPTは初めてで、最初は、K、P、Tそれぞれどのような基準で出せば良いのかわかりませんでした。特に決まったルールもないので、各自、自身の判断で上げていきました。量もとても多くなったのですが、数を重ねていくうちにチーム内である程度共通の認識が生まれて、項目数も少なくなってきました。&lt;/p&gt;

&lt;h2&gt;どんなことを話したのか&lt;/h2&gt;

&lt;p&gt;多岐に渡るのですが、目立つものとして、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;他の人の作業が見えない：　Codetree -&amp;gt; Zenhub を導入して解消&lt;/li&gt;
&lt;li&gt;Githubの通知に気付けない： GithubNotifier/GithubPop を導入して解消&lt;/li&gt;
&lt;li&gt;新しく開発するサービスの本質を理解する： T「WORK SHIFT」を一部を読む。&lt;/li&gt;
&lt;li&gt;朝回に行う事&lt;/li&gt;
&lt;li&gt;技術的なキャッチアップの方法。継続的な学習&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなどです。&lt;/p&gt;

&lt;h2&gt;何が良かったか&lt;/h2&gt;

&lt;p&gt;目の前の問題を解決するといったわかりやすいよさもありましたが、それと同じかそれ以上に良いと思ったのは、もう少し形のない問題について話すことができたことです。継続的学習や、サービスの本質、日々ちょっとだけ困っている細かいことなど。 &lt;strong&gt;日々ちょっとだけ困っていること&lt;/strong&gt; というのは、とても重要で、それを共有することで答えを持っている人が見つかり、改善していくことができました（ちなみに僕はGithubの@メンションを見落としがちということなどを書きました）。&lt;/p&gt;

&lt;p&gt;小さな問題を一つ一つ解消していくことで、最初は、殆ど変化がないように感じられますが、それを繰り返してゆくことで少しずつ業務の無駄がなくなり、知識も共有され、チーム感が出てきたように感じています。&lt;/p&gt;

&lt;h2&gt;継続的な改善は全てを変える&lt;/h2&gt;

&lt;p&gt;改善に関する格言を調べてみると、このようなものが見つかりました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Continuous improvements in any area eventually transform the operation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ピータードラッガーの言葉なのですが、自分なりに訳すと「継続的な改善は全てを変える」ということになります。継続的に改善を続けていくことで、最初は小さな変化かもしれないのですがそれが少しずつ積もって、足腰が鍛えられ、物事がうまく回るようになります。それを繰り返していくことで、始めた頃とは全く異なるような成長を遂げられるのではないかなと思いました。&lt;/p&gt;

&lt;h2&gt;参考資料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://techlife.cookpad.com/entry/2014/10/31/093305"&gt;KPTで粘り強く品質改善に取り組んだ話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://enterprisezine.jp/iti/detail/788"&gt;今日からできる！全員参加型の建設的フィードバック「ふりかえり」～実践編（KPT・タイムライン）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/esmsec/kpt-27942223"&gt;KPTの基本と、その活用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Swiftコーディング規約@Wantedly</title>
    <link rel="alternate" href="http://engineer.wantedly.com/2014/10/06/swift-style-guide.html"/>
    <id>http://engineer.wantedly.com/2014/10/06/swift-style-guide.html</id>
    <published>2014-10-05T15:00:00Z</published>
    <updated>2015-09-09T14:26:09+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://qiita.com/susieyy/items/f71435cc962e70d81b37"&gt;&lt;img alt="Siori" src="/images/2014-10-06/swift_style_guide-c0d180d5.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんにちは！エンジニアの&lt;a href="https://www.wantedly.com/users/631708"&gt;杉上&lt;/a&gt;です。&lt;/p&gt;

&lt;h2&gt;Swiftのコーディング規約を作成しています！&lt;/h2&gt;

&lt;p&gt;WantedlyではSwift言語で開発したiPhoneアプリ&lt;a href="https://itunes.apple.com/jp/app/wired-vicenadono-hao-qi-xinwo/id913849903?mt=8"&gt;Siori&lt;/a&gt;をリリースしました。&lt;/p&gt;

&lt;p&gt;その開発経験を元に&lt;a href="http://qiita.com/susieyy/items/f71435cc962e70d81b37"&gt;Swiftコーディング規約&lt;/a&gt;を作成しています。&lt;/p&gt;

&lt;p&gt;Swiftのコードは多様な記述の仕方ができるので柔軟でかつ表現力もありますが、チームで開発を行うとどうしても記述の仕方が統一できず可読性も上がりません。このコーディング規約がベストプラクティスだというわけではありませんが、Swiftもまだまだ手探りなところもあるので参考情報としてご参照いただき、皆さんと一緒にブラッシュアップしていきたいと思っております。&lt;/p&gt;

&lt;h2&gt;コーディング規約の必要性について&lt;/h2&gt;

&lt;p&gt;Swiftはプログラマがリスクを取ることによってより簡素に端的に記述ができたり、型推論が強力なので型の明記を省略して記述ができます。チームでSwift開発を行う場合は、詳細に記述するのか、省略して記述するのか、またはその間のどれぐらいの塩梅にするのかコンセンサスがないと統一されない多様な表現のコードが溢れてしまいます。なので規約の必要性・需要は高いのではないかと思い、Swiftがリリースされたばかりという早い時期から規約の作成に取り組んでいます。&lt;/p&gt;

&lt;h2&gt;規約はどこに？&lt;/h2&gt;

&lt;p&gt;qiita上で公開しています。
ご指摘点、追加要望などありましたらコメント頂けると幸いです。&lt;/p&gt;

&lt;p&gt;以下URL先のqiitaサイトをご参照ください。&lt;/p&gt;

&lt;h3&gt;&lt;a href="http://qiita.com/susieyy/items/f71435cc962e70d81b37"&gt;Swiftコーディング規約&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;では、Swiftの開発を楽しんでください！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>WantedlyではどうやってiOSアプリ開発しているのか</title>
    <link rel="alternate" href="http://engineer.wantedly.com/2014/04/28/how-wantedly-make-ios-app.html"/>
    <id>http://engineer.wantedly.com/2014/04/28/how-wantedly-make-ios-app.html</id>
    <published>2014-04-27T15:00:00Z</published>
    <updated>2015-09-09T14:26:09+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Yuri" src="https://huntr-static.s3.amazonaws.com/engineer_blog/2014-04-28-cover.jpeg" /&gt;&lt;/p&gt;

&lt;p&gt;こんにちは！エンジニアの&lt;a href="https://www.wantedly.com/users/10599"&gt;川崎&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;先週行われた
&lt;a href="http://eventdots.jp/event/47442"&gt;Consumer Service Engineer MeetUp Vol.1　~iOS編~&lt;/a&gt;
というイベントで「WantedlyではどうやってiOSアプリ開発しているのか」というテーマで発表してきました。&lt;/p&gt;

&lt;p&gt;僕自身の普段の担当は、全体の設計やサーバ側の開発、プロジェクト進行あたりなので、
今回はWantedlyでiOSアプリを「プロトタイピング」し「開発」そして「テスト」するまでで使ってるツール・取り組みをざっくり紹介させていただきました。&lt;/p&gt;

&lt;p&gt;意外とこの手の話をする機会はいままでなかったので、
現在開発中のアプリも含め、今現在うちでは何をどうやっているのかまとめられてよかったかなと思います。&lt;/p&gt;

&lt;p&gt;以下、発表で紹介したURLなどです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;プロトタイピング

&lt;ul&gt;
&lt;li&gt;ホワイトボードでアイデアだし&lt;/li&gt;
&lt;li&gt;&lt;a href="https://moqups.com/"&gt;moqups&lt;/a&gt;でモックアップ作成&lt;/li&gt;
&lt;li&gt;&lt;a href="https://popapp.in/"&gt;Pop&lt;/a&gt;を使って実機でプロトタイプを触ってみる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;開発

&lt;ul&gt;
&lt;li&gt;Wantedlyでよく使ってるCocoaPods一覧

&lt;ul&gt;
&lt;li&gt;RestKit - consuming and modeling RESTful web resources&lt;/li&gt;
&lt;li&gt;AFNetworking - networking framework&lt;/li&gt;
&lt;li&gt;SDWebImage - Asynchronous image downloader with cache support with an UIImageView category&lt;/li&gt;
&lt;li&gt;RNCryptor - Encryptor/Decryptor&lt;/li&gt;
&lt;li&gt;UICKeyChainStore - a simple wrapper for Keychain&lt;/li&gt;
&lt;li&gt;SVProgressHUD - A clean and lightweight progress HUD&lt;/li&gt;
&lt;li&gt;TTTAttributedLabel - A drop-in replacement for UILabel that supports attributes, data detectors, links, and more.&lt;/li&gt;
&lt;li&gt;NUI - Style iOS apps with a stylesheet, similar to CSS&lt;/li&gt;
&lt;li&gt;JLRoutes - Advanced URL parsing designed to handle complex URL schemes with a block-based callback API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cocoapods.wantedly.com/"&gt;COCOAPODS SEARCH&lt;/a&gt;でCocoaPodの人気度・定番度をチェック&lt;/li&gt;
&lt;li&gt;使ってる&lt;a href="https://github.com/wantedly/objective-c-style-guide"&gt;Objective-Cのスタイルガイド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テスト

&lt;ul&gt;
&lt;li&gt;Rails側のCIは&lt;a href="http://wercker.com/"&gt;wercker&lt;/a&gt;で&lt;/li&gt;
&lt;li&gt;アプリのユーザテスト用に&lt;a href="https://www.testflightapp.com/"&gt;TestFlight&lt;/a&gt;で開発版を配信&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;script async class="speakerdeck-embed" data-id="0ad89a10b0f50131486d72af66ead636" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、今回のイベントの発表者は自社サービスを開発・運営している会社に限定ということで、
Wantedlyの他にはヴァズ株式会社 (SnapDish)、エニグモ (BUYMA)、はてな、nanapi (アンサー)、
マインドパレット (Snapeee)さんが発表していました。
そのうち主催のほうで他の方の発表のまとめも公開されると思います！&lt;/p&gt;
</content>
  </entry>
</feed>
